import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of } from 'rxjs';
import { AuthService } from 'src/app/services/auth.service';
import { CulturalOfferService } from 'src/app/services/culturalOffer.service';
import { RouterTestingModule } from '@angular/router/testing';
import { CommentListComponent } from './comment-list.component';

describe('CommentListComponent', () => {
  let component: CommentListComponent;
  let fixture: ComponentFixture<CommentListComponent>;
  let offerService: CulturalOfferService;

  beforeEach(() => {

    let offerServiceMock = {

      getCommentsForOffer: jasmine.createSpy('getCommentsForOffer')
        .and.returnValue(of({
          "content": [
            {
              "id": 14,
              "commenterEmail": "dulex@maildrop.cc",
              "commenterName": "Test Testnic",
              "content": "ASD",
              "image": {
                "id": 15,
                "picByte": ""
              },
              "offer": null
            }
          ],
          "totalElements": 1,
          "last": true,
          "totalPages": 1,
          "size": 5,
          "number": 0,
          "numberOfElements": 1,
          "first": true,
          "empty": false,
          "pageNumber": 0,
          "pageSize": 5
        }))

    }

    TestBed.configureTestingModule({
      declarations: [ CommentListComponent ],
      providers: [
        { provide: CulturalOfferService, useValue: offerServiceMock }, AuthService
      ],
      imports: [HttpClientTestingModule, RouterTestingModule]
    })
      .compileComponents();

    fixture = TestBed.createComponent(CommentListComponent);
    offerService = TestBed.inject(CulturalOfferService);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should retrieve comments', () => {
    component.pageNum = 1;

    component.retrieveComments();

    expect(offerService.getCommentsForOffer).toHaveBeenCalled();
  });

});
